rwr {
  top [ws1 name ws2 lb ws3 rule+ ws4 rb ws5] = ‛{
«rule»
    _terminal: function () { return this.sourceString; },
    _iter: function (...children) { return children.map(c => c.rwr ()); },
    spaces: function (x) { return this.sourceString; },
    space: function (x) { return this.sourceString; }
}
’
  rule [ws1 name ws2 lb ws3 param* ws4 rb ws5 downMechanism? ws6 _eq ws7 s] ‛\n«_.setRuleName (name)»;\n«_.resetTreeWalker ()»;’ = ‛
«name» : function («param») {
_ruleEnter ("«_.getRuleName ().rwr ()»");
«downMechanism»
«_.expandTreeWalker ()»
_ruleExit ("«_.getRuleName ().rwr ()»");
return \\`\\$\\{«s»\\}\\`;
’

  rewriteString [lq cs* rq ws] = ‛«cs»’
  downMechanism [lq cs* rq] = ‛«cs»’
  char_eval [lb cs* rb] = ‛«cs»’
  char_newline [_ c] = ‛«c»’
  char_esc [_ c] = ‛«c»’
  char_raw [c] = ‛«c»’
  nonBracketChar [c] = ‛«c»’
  name [first rest*] = ‛«first»«rest»’
  nameFirst [c] = ‛«c»’
  nameRest [c] = ‛«c»’
  param [pdef ws] = ‛«pdef»’
  paramDef_plus [name suffix] = ‛«_.appendTreeWalkerCode (`\n${name} = ${name}.rwr ().join ('');`)»«name»’
  paramDef_star [name suffix] = ‛«_.appendTreeWalkerCode (`\n${name} = ${name}.rwr ().join ('');`)»«name»’
  paramDef_opt [name suffix] = ‛«_.appendTreeWalkerCode (`\n${name} = ${name}.rwr ().join ('');`)»«name»’
  paramDef_flat [name] = ‛«_.appendTreeWalkerCode (`\n${name} = ${name}.rwr ();`)»«name»’
  comment [slsl cs* nl] = ‛’
}

